---
---
<section>
  <div class="background flex gap-2 sticky top-10 pt-2 sm:pt-4 pb-2 -mt-4">
    <span class="my-0">[</span>
    <input
      id="search"
      class="bg-transparent outline-0 flex-grow py-2 -my-2 min-w-[0]"
      type="text"
      placeholder="search posts | # for tags"
      spellcheck="false"
    />
    <span class="my-0">]</span>
    <small id="message" class="hidden my-auto whitespace-nowrap" />
  </div>
  <div id="results">
    <div id="result" class="hidden my-6 py-2 gap-6 justify-between w-full">
      <div class="flex flex-col">
        <p class="mt-0 text-xs sm:text-sm" data-created></p>
        <a class="decoration-none" target="_self" data-url>
          <h1 class="my-0 text-lg sm:text-xl" data-title />
        </a>
        <p class="mt-2 text-sm sm:text-base" data-desc />
        <small class="my-0 flex flex-wrap gap-x-4 text-sm" data-tags />
      </div>
      <img
        class="my-auto aspect-square object-cover w-[25%]"
        data-src="/assets/post/"
        data-alt="thumbnail"
        draggable="false"
        width="25%"
        height="100%"
      />
    </div>
  </div>
</section>

<script>
import type { CollectionEntry } from 'astro:content';
import fuzzysort from 'fuzzysort';

type Post = Omit<CollectionEntry<'posts'>['data'], 'tags'> & {
  url: string
  tags: string
};

type fuzzysort = {
  options: Fuzzysort.KeysOptions<Post>;
  results: Fuzzysort.KeysResults<Post>;
  result: Fuzzysort.KeysResult<Post>;
};

// Reusable function to mark fuzzy search result
function getHighlight(result: Fuzzysort.Result) {
  if (!result) return null;

  return fuzzysort
    .highlight(result, (m) => `<mark>${m}</mark>`)!
    .join('');
};

// Define element variables
const main = document.querySelector('#main');
const search = document.querySelector('#search');
const message = document.querySelector('#message');
const resultContainer = document.querySelector('#results');

// Define reusable result element from placeholder
const resultPlaceholder = document.querySelector('#result').cloneNode(true);

resultPlaceholder.classList.replace('hidden', 'flex');
document.querySelector('#result').remove();

let data = false;

// On search focus, fetch posts and parse to json
search.addEventListener('focus', async () => {
  if (!data) data = await(await fetch('/posts.json')).json();
});

// Search happens for every keystroke
search.addEventListener('input', (e: Event) => {
  if (!data) return;

  const target = e.target as HTMLInputElement;
  const value: string = target.value.replace('#', '');

  main.classList.toggle('hidden', Boolean(value.length));
  resultContainer.replaceChildren();

  if (!value.length) return message.classList.add('hidden');

  // Search key based on #
  const isTag: boolean = target.value.startsWith('#');
  const keys: string[] = isTag
    ? ['tags']
    : ['title', 'description'];

  const options: fuzzysort['options'] = {
    limit: 20,
    threshold: -10000,
    keys
  }

  const results: fuzzysort['results'] = fuzzysort.go<Post>(value, data, options);

  message.classList.remove('hidden');
  message.textContent = results.length + ' results found';

  results.forEach((result: fuzzysort['result']) => {
    let title: string = result.obj.title;
    let description: string = result.obj.description;
    let thumbnail: string = result.obj.thumbnail;
    let tagsString: string = result.obj.tags;

    // Highlight results based on mode
    if (isTag) {
      tagsString = getHighlight(result[0]) ?? tagsString;
    } else {
      title = getHighlight(result[0]) ?? title;
      description = getHighlight(result[1]) ?? description;
    }

    // Split tags using span, always return as string
    const tags: string = tagsString.split(',')
      .map((tag: string) => `<span>#${tag}</span>`)
      .join('');

    // Make result element from placeholder and insert to container
    const resultItem = resultPlaceholder.cloneNode(true);

    resultItem.querySelector('[data-title]').innerHTML = title;
    resultItem.querySelector('[data-desc]').innerHTML = description;
    resultItem.querySelector('[data-tags]').innerHTML = tags;
    resultItem.querySelector('[data-created]').innerHTML = result.obj.created;
    resultItem.querySelector('[data-url]').href = result.obj.url;

    const img = resultItem.querySelector('img');

    if (thumbnail) {
      img.src = img.dataset.src + thumbnail;
      img.alt = title + ' ' + img.dataset.alt;
    } else {
      img.remove();
    }

    resultContainer.appendChild(resultItem);
  });
});
</script>
