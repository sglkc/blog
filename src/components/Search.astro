<div
  class="flex gap-2 bg-stone-100 dark:bg-gray-900 sticky top-10 pt-2 sm:pt-4 pb-2 -mt-4 transition-[background-color]"
>
  <p class="my-0">[</p>
  <input
    id="search"
    class="bg-transparent outline-0 flex-grow py-2 -my-2"
    type="text"
    placeholder="search posts | # for tags"
    spellcheck="false"
  />
  <p class="my-0">]</p>
  <small id="results-small" class="my-auto"></small>
</div>
<div id="results"></div>

<script>
// write client-side script to get results, because i don't want to add
// another library just for this
import fuzzysort from 'fuzzysort';

let blogs = [];
const searchInput = document.getElementById('search') as HTMLInputElement;
const resultDiv = document.getElementById('results');
const resultsSmall = document.getElementById('results-small');
const mainElm = document.querySelector('main');
const getHighlight = (result) => {
  if (!result) return null;
  return fuzzysort.highlight(result, (m) => `<mark>${m}</mark>`).join('');
};

searchInput.addEventListener('focus', async () => {
  if (blogs.length) return;

  const data = await fetch('/blogs.json');

  // can't parse to json because astro builds with doctype and escapes html
  const text = await data.text();
  const elm = document.createElement('pre');

  elm.innerHTML = text.replace('<!DOCTYPE html>', '');
  blogs = JSON.parse(elm.innerHTML);
});

searchInput.addEventListener('input', () => {
  if (!blogs.length) return;

  const value = searchInput.value.replace('#', '');

  mainElm.style.display = '';
  resultDiv.innerHTML = '';
  resultsSmall.innerText = '';

  if (!value.length) return;

  const isTag = searchInput.value.startsWith('#');
  const options = isTag ? { key: 'tags' } : { keys: ['title', 'description'] };
  const results = fuzzysort.go(value, blogs, {
    limit: 20,
    threshold: -10000,
    ...options
  });

  resultsSmall.innerText = `${results.length} results found`;

  if (results.length) mainElm.style.display = 'none';
  else return mainElm.style.display = '';

  results.forEach((result: any) => {
    let title = result.obj.title;
    let description = result.obj.description;
    let tagsString = result.obj.tags;

    if (isTag) {
      tagsString = getHighlight(result) ?? tagsString;
    } else {
      title = getHighlight(result[0]) ?? title;
      description = getHighlight(result[1]) ?? description;
    }

    const tags = tagsString.split(',')
      .map((tag: string) => `<span>#${tag}</span>`)
      .join('');

    const elm = `
<div class="my-6 py-2 flex flex-col gap-4">
  <p class="my-0 text-sm -mb-2">${result.obj.created}</p>
  <a class="text-xl font-semibold my-0" href=${result.obj.url}>${title}</a>
  <h4 class="font-light my-0 text-sm sm:text-base">${description}</h4>
  <div class="flex flex-wrap gap-x-4 text-sm">${tags}</div>
</div>
`;

    resultDiv.insertAdjacentHTML('beforeend', elm);
  });
});
</script>
